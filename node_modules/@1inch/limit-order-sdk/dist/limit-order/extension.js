"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Extension = void 0;
const ethers_1 = require("ethers");
const byte_utils_1 = require("@1inch/byte-utils");
const assert_1 = __importDefault(require("assert"));
const constants_1 = require("../constants");
class Extension {
    constructor(data = {
        makerAssetSuffix: constants_1.ZX,
        takerAssetSuffix: constants_1.ZX,
        makingAmountData: constants_1.ZX,
        takingAmountData: constants_1.ZX,
        predicate: constants_1.ZX,
        makerPermit: constants_1.ZX,
        preInteraction: constants_1.ZX,
        postInteraction: constants_1.ZX,
        customData: constants_1.ZX
    }) {
        this.makerAssetSuffix = constants_1.ZX;
        this.takerAssetSuffix = constants_1.ZX;
        this.makingAmountData = constants_1.ZX;
        this.takingAmountData = constants_1.ZX;
        this.predicate = constants_1.ZX;
        this.makerPermit = constants_1.ZX;
        this.preInteraction = constants_1.ZX;
        this.postInteraction = constants_1.ZX;
        this.customData = constants_1.ZX;
        Object.entries(data).forEach(([key, val]) => (0, assert_1.default)((0, byte_utils_1.isHexString)(val) || val === constants_1.ZX, `${key} must be valid hex string`));
        this.makerAssetSuffix = data.makerAssetSuffix;
        this.takerAssetSuffix = data.takerAssetSuffix;
        this.makingAmountData = data.makingAmountData;
        this.takingAmountData = data.takingAmountData;
        this.predicate = data.predicate;
        this.makerPermit = data.makerPermit;
        this.preInteraction = data.preInteraction;
        this.postInteraction = data.postInteraction;
        this.customData = data.customData;
    }
    static default() {
        return new Extension();
    }
    keccak256() {
        return BigInt((0, ethers_1.keccak256)(this.encode()));
    }
    isEmpty() {
        const allInteractions = [
            this.makerAssetSuffix,
            this.takerAssetSuffix,
            this.makingAmountData,
            this.takingAmountData,
            this.predicate,
            this.makerPermit,
            this.preInteraction,
            this.postInteraction
        ];
        const allInteractionsConcat = allInteractions.map(byte_utils_1.trim0x).join('') + (0, byte_utils_1.trim0x)(this.customData);
        return allInteractionsConcat.length === 0;
    }
    encode() {
        const allInteractions = [
            this.makerAssetSuffix,
            this.takerAssetSuffix,
            this.makingAmountData,
            this.takingAmountData,
            this.predicate,
            this.makerPermit,
            this.preInteraction,
            this.postInteraction
        ];
        const allInteractionsConcat = allInteractions.map(byte_utils_1.trim0x).join('') + (0, byte_utils_1.trim0x)(this.customData);
        const cumulativeSum = ((sum) => (value) => {
            sum += value;
            return sum;
        })(0);
        const offsets = allInteractions
            .map((a) => a.length / 2 - 1)
            .map(cumulativeSum)
            .reduce((acc, a, i) => acc + (BigInt(a) << BigInt(32 * i)), 0n);
        let extension = '0x';
        if (allInteractionsConcat.length > 0) {
            extension +=
                offsets.toString(16).padStart(64, '0') + allInteractionsConcat;
        }
        return extension;
    }
}
exports.Extension = Extension;
//# sourceMappingURL=extension.js.map