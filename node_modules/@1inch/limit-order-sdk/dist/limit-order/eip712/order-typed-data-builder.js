"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLimitOrderV4Domain = exports.getDomainSeparator = exports.buildOrderTypedData = exports.getOrderHash = void 0;
const eth_sig_util_1 = require("@metamask/eth-sig-util");
const domain_1 = require("./domain");
const constants_1 = require("../../constants");
function getOrderHash(data) {
    return ('0x' +
        eth_sig_util_1.TypedDataUtils.eip712Hash(data, eth_sig_util_1.SignTypedDataVersion.V4).toString('hex'));
}
exports.getOrderHash = getOrderHash;
function buildOrderTypedData(chainId, verifyingContract, name, version, order) {
    return {
        primaryType: 'Order',
        types: { EIP712Domain: domain_1.EIP712Domain, Order: domain_1.Order },
        domain: { name, version, chainId, verifyingContract },
        message: order
    };
}
exports.buildOrderTypedData = buildOrderTypedData;
function getDomainSeparator(name, version, chainId, verifyingContract) {
    return ('0x' +
        eth_sig_util_1.TypedDataUtils.hashStruct('EIP712Domain', { name, version, chainId, verifyingContract }, { EIP712Domain: domain_1.EIP712Domain }, eth_sig_util_1.SignTypedDataVersion.V4).toString('hex'));
}
exports.getDomainSeparator = getDomainSeparator;
function getLimitOrderV4Domain(chainId) {
    return {
        name: domain_1.LimitOrderV4TypeDataName,
        version: domain_1.LimitOrderV4TypeDataVersion,
        chainId,
        verifyingContract: (0, constants_1.getLimitOrderContract)(chainId)
    };
}
exports.getLimitOrderV4Domain = getLimitOrderV4Domain;
//# sourceMappingURL=order-typed-data-builder.js.map