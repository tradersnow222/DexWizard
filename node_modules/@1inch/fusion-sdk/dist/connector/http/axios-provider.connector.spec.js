"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const axios_provider_connector_1 = require("./axios-provider.connector");
describe('Axios Http provider connector', () => {
    let httpConnector;
    beforeEach(() => {
        httpConnector = new axios_provider_connector_1.AxiosProviderConnector('test-key');
    });
    it('should make get() request', async () => {
        const url = 'https://123.com/test/?val=1';
        const returnedValue = {
            data: { a: 1 }
        };
        jest.spyOn(axios_1.default, 'get').mockImplementationOnce(() => Promise.resolve(returnedValue));
        const res = await httpConnector.get(url);
        expect(res).toStrictEqual(returnedValue.data);
        expect(axios_1.default.get).toHaveBeenCalledWith(url, {
            headers: { Authorization: 'Bearer test-key' }
        });
    });
    it('should make post() request', async () => {
        const url = 'https://123.com/test/?val=1';
        const body = { info: 123 };
        const returnedValue = {
            data: { a: 1 }
        };
        jest.spyOn(axios_1.default, 'post').mockImplementationOnce(() => Promise.resolve(returnedValue));
        const res = await httpConnector.post(url, body);
        expect(res).toStrictEqual(returnedValue.data);
        expect(axios_1.default.post).toHaveBeenCalledWith(url, body, {
            headers: { Authorization: 'Bearer test-key' }
        });
    });
});
//# sourceMappingURL=axios-provider.connector.spec.js.map