"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AxiosProviderConnector = void 0;
const axios_1 = __importStar(require("axios"));
const errors_1 = require("../../errors");
class AxiosProviderConnector {
    constructor(authKey) {
        this.authKey = authKey;
    }
    async get(url) {
        try {
            const res = await axios_1.default.get(url, this.authKey
                ? {
                    headers: {
                        Authorization: `Bearer ${this.authKey}`
                    }
                }
                : undefined);
            return res.data;
        }
        catch (error) {
            if ((0, axios_1.isAxiosError)(error) && error.response?.status === 401) {
                throw new errors_1.AuthError();
            }
            throw error;
        }
    }
    async post(url, data) {
        try {
            const res = await axios_1.default.post(url, data, this.authKey
                ? {
                    headers: {
                        Authorization: `Bearer ${this.authKey}`
                    }
                }
                : undefined);
            return res.data;
        }
        catch (error) {
            if ((0, axios_1.isAxiosError)(error) && error.response?.status === 401) {
                throw new errors_1.AuthError();
            }
            throw error;
        }
    }
}
exports.AxiosProviderConnector = AxiosProviderConnector;
//# sourceMappingURL=axios-provider.connector.js.map