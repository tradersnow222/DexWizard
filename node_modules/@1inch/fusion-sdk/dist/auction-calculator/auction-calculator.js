"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuctionCalculator = void 0;
const calc_1 = require("./calc");
const constants_1 = require("./constants");
const sdk_1 = require("../sdk");
class AuctionCalculator {
    constructor(startTime, duration, initialRateBump, points, takerFeeRatio) {
        this.startTime = startTime;
        this.duration = duration;
        this.initialRateBump = initialRateBump;
        this.points = points;
        this.takerFeeRatio = takerFeeRatio;
    }
    static fromAuctionData(data, details) {
        return new AuctionCalculator(data.auctionStartTime, details.duration, details.initialRateBump, details.points, data.integratorFee?.ratio || 0n);
    }
    calcAuctionTakingAmount(takingAmount, rate) {
        const auctionTakingAmount = (BigInt(takingAmount) * (BigInt(rate) + constants_1.RATE_BUMP_DENOMINATOR)) /
            constants_1.RATE_BUMP_DENOMINATOR;
        if (this.takerFeeRatio === 0n) {
            return auctionTakingAmount.toString();
        }
        return (0, sdk_1.addRatioToAmount)(auctionTakingAmount, this.takerFeeRatio).toString();
    }
    calcRateBump(time) {
        let cumulativeTime = BigInt(this.startTime);
        const lastTime = BigInt(this.duration) + cumulativeTime;
        const startBump = BigInt(this.initialRateBump);
        const currentTime = BigInt(time);
        if (currentTime <= cumulativeTime) {
            return Number(this.initialRateBump);
        }
        else if (currentTime >= lastTime) {
            return 0;
        }
        let prevCoefficient = startBump;
        let prevCumulativeTime = cumulativeTime;
        for (let i = this.points.length - 1; i >= 0; i--) {
            const { coefficient, delay } = this.points[i];
            cumulativeTime = cumulativeTime + BigInt(delay);
            const coefficientBN = BigInt(coefficient);
            if (cumulativeTime >= currentTime) {
                const rate = (0, calc_1.linearInterpolation)(prevCumulativeTime, cumulativeTime, prevCoefficient, coefficientBN, currentTime);
                return Number(rate);
            }
            prevCumulativeTime = cumulativeTime;
            prevCoefficient = coefficientBN;
        }
        const rate = (0, calc_1.linearInterpolation)(prevCumulativeTime, lastTime, prevCoefficient, 0n, currentTime);
        return Number(rate);
    }
}
exports.AuctionCalculator = AuctionCalculator;
//# sourceMappingURL=auction-calculator.js.map